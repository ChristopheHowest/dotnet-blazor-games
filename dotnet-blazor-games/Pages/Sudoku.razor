@page "/sudoku"

<h3>Sudoku</h3>

<div class="block">
	<div class="sudoku">
		@foreach (int i in new[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, })
		{
			<div class="sudoku-square">
				@foreach (int j in new[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, })
				{
					<button class="sudoku-cell @GameLogic.Sudoku.Board[i, j].Locked @GameLogic.Sudoku.Board[i, j].Selected" @onclick="() => ClickCell(i, j)">@GameLogic.Sudoku.Board[i, j].Value</button>
				}
			</div>
		}
	</div>
</div>

<br/>

<h4>Controls</h4>

<div class="controls">
	<button class="sudoku-value" @onclick="() => GameLogic.Sudoku.TryMove(null)">X</button>
	@foreach (int i in new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, })
	{
	<button class="sudoku-cell" @onclick="() => GameLogic.Sudoku.TryMove(i)">@i</button>
	}
	<button class="btn btn-primary" @onclick="GenerateNewPuzzle">New Puzzle</button>
</div>

<style>
	.block {
		width: 100%;
	}

	.controls {
		margin: 1rem;
	}

	.controls button {
		margin: .5rem;
	}

	button.sudoku-value {
		background-color: #f9f9f9;
		font-size: 1rem;
		text-align: center;
		width: 2rem;
		height: 2rem;
		outline: none !important;
		border: none;
		margin: 1rem;
	}

	.sudoku {
		display: grid;
		grid-template-columns: auto auto auto;
		background-color: #333;
		width: auto;
		height: auto;
		column-gap: .5rem;
		row-gap: .5rem;
		padding: .5rem;
		float: left;
	}

	.sudoku-square {
		display: grid;
		grid-template-columns: auto auto auto;
		background-color: #333;
		width: auto;
		height: auto;
		column-gap: .25rem;
		row-gap: .25rem;
	}

	.sudoku-cell {
		background-color: #f9f9f9;
		font-size: 1rem;
		text-align: center;
		width: 2rem;
		height: 2rem;
		outline: none !important;
		border: none;
		/* margin: auto; */
	}

	.locked {
		background-color: #ccc;
	}

	.selected {
		background-color: darkcyan;
	}

	.blocking {
		background-color: darkred;
	}
</style>

@code
{
	static void ClickCell(int i, int j)
	{
		if (string.IsNullOrWhiteSpace(GameLogic.Sudoku.Board[i, j].Locked))
		{
			if (GameLogic.Sudoku.SelectedCell is not null)
			{
				GameLogic.Sudoku.SelectedCell.Selected = string.Empty;
			}
			GameLogic.Sudoku.SelectedCell = GameLogic.Sudoku.Board[i, j];
			GameLogic.Sudoku.SelectedCell.Selected = "selected";
		}
	}

	static void GenerateNewPuzzle()
	{
		GameLogic.Sudoku.Board = GameLogic.Sudoku.Generate();
		if (GameLogic.Sudoku.SelectedCell is not null)
		{
			GameLogic.Sudoku.SelectedCell.Selected = "";
			GameLogic.Sudoku.SelectedCell = null;
		}
	}
}
